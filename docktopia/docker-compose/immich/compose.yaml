########################### STACK PROPERTIES
name: immich

########################### SECRETS
secrets:
  postgres_db_password:
    file: ${DOCKER_SECRETS:?}/immich_postgres_password

########################### NETWORKS
networks:
  proxy:
    name: proxy
    external: "true"
  immich_app:
    name: immich_app
    internal: "true"
    labels:
      internal.docker.network.description: "Immich internal app network"  

########################### SERVICES  
services:
  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    restart: unless-stopped
    depends_on:
      - redis
      - database
    networks:
      proxy: {}                                                       ## Reverse proxy network
      immich_app: {}                                                  ## Network for the Immich component to connect with each other
    ports:
      - "2283:2283"
    # extends:
    #   file: hwaccel.transcoding.yml
    #   service: cpu # set to one of [nvenc, quicksync, rkmpp, vaapi, vaapi-wsl] for accelerated transcoding
    env_file:
      - .env
    environment:
      DB_PASSWORD_FILE: /run/secrets/postgres_db_password
    volumes:
    # Do not edit the next line. If you want to change the media storage location on your system, edit the value of UPLOAD_LOCATION in the .env file
      # - ${UPLOAD_LOCATION}:/usr/src/app/upload
      - ${UPLOAD_LOCATION}:/data
      - /etc/localtime:/etc/localtime:ro
    secrets:
      - postgres_db_password

    healthcheck:
      disable: "false"

    labels:
      traefik.enable: "true"
      traefik.http.routers.immich.entrypoints: https-internal    ## "https-internal"; or "https-external"; or addtional traefik router/s needed for different config
      traefik.http.routers.immich.rule: Host(`immich.${DOMAIN_NAME:-home.arpa}`) || Host(`photobook.${DOMAIN_NAME:-home.arpa}`)
      traefik.http.routers.immich.tls.certresolver: letsencrypt_dns ## letsencrypt; letsencrypt_dns; letsencrypt_testing
      traefik.http.routers.immich.service: immich
      # traefik.http.services.immich.loadbalancer.server.url: "http://${HOST_IP:?}:2283"
      traefik.http.services.immich.loadbalancer.server.url: "http://immich-server:2283"

      homepage.group: Media Players
      homepage.name: Immich
      homepage.icon: immich.svg
      homepage.href: https://photobook.${DOMAIN_NAME:?}
      homepage.description: Photo importer and manager
      homepage.widget.type: immich
      homepage.widget.url: http://immich-server:2283
      homepage.widget.key: "{{HOMEPAGE_FILE_IMMICH_API}}"
      homepage.widget.version: 2
      homepage.widget.fields: '["users" ,"photos", "videos", "storage"]'  ## Options: "users", "photos", "videos", "storage"

  immich-machine-learning:
    container_name: immich_machine_learning
    # For hardware acceleration, add one of -[armnn, cuda, rocm, openvino, rknn] to the image tag.
    # Example tag: ${IMMICH_VERSION:-release}-cuda
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/ml-hardware-acceleration
    #   file: hwaccel.ml.yml
    #   service: cpu # set to one of [armnn, cuda, rocm, openvino, openvino-wsl, rknn] for accelerated inference - use the `-wsl` version for WSL2 where applicable
    networks:
      immich_app: {}                                                  ## Network for the Immich components to connect with each other
    volumes:
      - model-cache:/cache
    env_file:
      - .env
    restart: always
    healthcheck:
      disable: "false"

  redis:
    container_name: immich_redis
    # image: docker.io/valkey/valkey:8-bookworm@sha256:42cba146593a5ea9a622002c1b7cba5da7be248650cbb64ecb9c6c33d29794b1
    image: docker.io/valkey/valkey:8-bookworm@sha256:fea8b3e67b15729d4bb70589eb03367bab9ad1ee89c876f54327fc7c6e618571
    networks:
      immich_app: {}
    healthcheck:
      test: redis-cli ping || exit 1
    restart: always

  database:
    container_name: immich_postgres
    # image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:739cdd626151ff1f796dc95a6591b55a714f341c737e27f045019ceabf8e8c52
    # image: ghcr.io/immich-app/postgres:14-vectorchord0.3.0-pgvectors0.2.0
    image: ghcr.io/immich-app/postgres:14-vectorchord0.4.3-pgvectors0.2.0@sha256:8d292bdb796aa58bbbaa47fe971c8516f6f57d6a47e7172e62754feb6ed4e7b0
    networks:
      immich_app: {}
    environment:
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_db_password
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: '--data-checksums'
      # Uncomment the DB_STORAGE_TYPE: 'HDD' var if your database isn't stored on SSDs
      # DB_STORAGE_TYPE: 'HDD'
    secrets:
      - postgres_db_password
    volumes:
      # Do not edit the next line. If you want to change the database storage location on your system, edit the value of DB_DATA_LOCATION in the .env file
      - ${DB_DATA_LOCATION}:/var/lib/postgresql/data
    # healthcheck:
    #   test: >-
    #     pg_isready --dbname="$${POSTGRES_DB}" --username="$${POSTGRES_USER}" || exit 1; Chksum="$$(psql --dbname="$${POSTGRES_DB}" --username="$${POSTGRES_USER}" --tuples-only --no-align --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')"; echo "checksum failure count is $$Chksum"; [ "$$Chksum" = '0' ] || exit 1
    #   interval: 5m
    #   start_interval: 30s
    #   start_period: 5m
    # command: >-
    #   postgres -c shared_preload_libraries=vectors.so -c 'search_path="$$user", public, vectors' -c logging_collector=on -c max_wal_size=2GB -c shared_buffers=512MB -c wal_compression=on
    restart: always

volumes:
  model-cache:
    driver: local
    driver_opts:
      type: "none"
      o: "bind,uid=${PUID_DOCKER},gid=${PGID_DOCKER}"
      device: "${CACHE_LOCATION:?}"